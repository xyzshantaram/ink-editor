{
  "version": 3,
  "sources": ["../src/utils/icons.ts", "../src/utils/misc.ts", "../src/InkEditor.ts", "../src/utils/editor.ts", "../src/defaults.ts", "../src/components/SnippetView.ts", "../src/components/Toolbar.ts", "../src/components/EditorButton.ts", "../src/components/PreviewController.ts", "../src/mod.ts"],
  "sourcesContent": ["import {\n    Quote,\n    Bold,\n    Italic,\n    Strikethrough,\n    Link,\n    Heading,\n    Heading2,\n    Check,\n    Scissors,\n    X,\n    Eye,\n    createElement,\n    RotateCcw\n} from 'lucide';\n\n/**\n * Collection of icon components used in the editor\n */\nconst usedIcons = {\n    Quote,\n    Bold,\n    Italic,\n    Strikethrough,\n    Link,\n    Heading,\n    Heading2,\n    Check,\n    Scissors,\n    X,\n    Eye,\n    RotateCcw\n}\n\n/**\n * Converts Lucide icon components to HTML strings\n */\nexport const Icons = Object.fromEntries(\n    Object.entries(usedIcons).map(([k, v]) => {\n        const elt = createElement(v);\n        elt.classList.add('lucide-icon');\n        return [k, elt.outerHTML] as [string, string];\n    })\n) as Record<keyof typeof usedIcons, string>;", "import { Icons } from \"./icons.ts\";\n\n/**\n * Gets a DOM element from a string selector or returns the passed element\n * @param root - A CSS selector or element reference\n * @returns The found HTMLElement\n */\nexport const getRootElt = (root: string | HTMLElement): HTMLElement => {\n    if (typeof root === 'string') {\n        const tmp = document.querySelector(root) as HTMLElement;\n        if (tmp === null) throw new Error('root div not found while initialising editor');\n        return tmp;\n    }\n    return root;\n}\n\n/**\n * Returns the HTML for an icon\n * @param name - Name of the icon to return\n * @returns RawHTML object for use with html`` templating\n */\nexport const icon = (name: keyof typeof Icons) => {\n    return { raw: true, contents: Icons[name] } as const;\n}\n\n/**\n * Creates a debounced version of a function\n * @param func - The function to debounce\n * @param delay - Delay in milliseconds\n * @returns Debounced function\n */\nexport function debounce(func: Function, delay: number | undefined) {\n    let timer: number;\n    return function (...args: any[]) {\n        clearTimeout(timer);\n        timer = window.setTimeout(() => {\n            func.apply(this, args);\n        }, delay || 0);\n    };\n}", "/**\n * Core editor module that implements the primary InkEditor functionality.\n * This module provides a rich-text markdown editor built on top of CodeMirror.\n */\n\nimport { EditorView } from '@codemirror/view';\nimport { debounce, getRootElt } from './utils/misc.ts';\nimport cf, { ListStore, Store } from 'campfire.js';\nimport { createCmEditor, getDocAndCursor, insertAround, insertBefore, insertWithNewline } from './utils/editor.ts';\nimport type { ButtonArgs, ButtonSpec } from './components/EditorButton.ts';\nimport { DEFAULT_ARGS, EDITOR_DEFAULT_ACTIONS } from './defaults.ts';\nimport { SnippetView } from './components/SnippetView.ts';\nimport { ToolbarButtons } from './components/Toolbar.ts';\nimport { PreviewController } from './components/PreviewController.ts';\n\n/**\n * Configuration options for the InkEditor instance\n * @interface InkOptions\n */\nexport interface InkOptions {\n    /** \n     * Controls toolbar visibility and configuration\n     * @type {boolean | {enable: boolean, defaults: boolean}}\n     */\n    toolbar: boolean | {\n        enable: boolean,\n        defaults: boolean\n    };\n\n    /**\n     * Whether to enable default editor actions (bold, italic, etc.)\n     * @type {boolean}\n     */\n    enableDefaultActions: boolean;\n\n    /**\n     * Default content to populate the editor with\n     * @type {string}\n     */\n    defaultContents: string;\n\n    /**\n     * Whether to enable the snippets feature\n     * @type {boolean}\n     */\n    enableSnippets: boolean;\n\n    /**\n     * Font family for the editor content\n     * @type {string}\n     */\n    fontFamily: string;\n\n    /**\n     * Editor height (CSS value)\n     * @type {string}\n     */\n    height: string;\n\n    /**\n     * Placeholder text to display when editor is empty\n     * @type {string}\n     */\n    placeholder: string;\n\n    /**\n     * Array of snippet strings available for insertion\n     * @type {string[]}\n     */\n    snippets: string[];\n\n    /**\n     * Editor width (CSS value)\n     * @type {string}\n     */\n    width: string;\n\n    /**\n     * Callback for autosaving editor contents\n     * @param {string} contents - Current editor contents\n     * @returns {void | Promise<void>}\n     */\n    onAutosave: (contents: string) => void | Promise<void>;\n\n    /**\n     * Callback when editor task is completed\n     * @param {string} contents - Current editor contents\n     * @returns {void | Promise<void>}\n     */\n    onDone: (contents: string) => void | Promise<void>;\n\n    /**\n     * Callback when editor is exited\n     * @param {string} contents - Current editor contents\n     * @returns {void | Promise<void>}\n     */\n    onExit: (contents: string) => void | Promise<void>;\n\n    /**\n     * Function to generate preview HTML from editor contents\n     * @param {string} contents - Current editor contents\n     * @returns {string | Promise<string>} HTML preview content\n     */\n    makePreview: (contents: string) => string | Promise<string>;\n\n    /**\n     * Function to retrieve previously saved content\n     * @returns {string | Promise<string>} Saved content\n     */\n    retrieveSaved: () => string | Promise<string>;\n\n    /**\n     * Delay in milliseconds before triggering autosave\n     * @type {number}\n     */\n    autosaveDelayMs: number;\n}\n\n/**\n * Arguments passed to editor action functions\n * @interface EditorActionArgs\n */\nexport interface EditorActionArgs {\n    /** Reference to the InkEditor instance */\n    editor: InkEditor\n}\n\n/**\n * Type definition for editor action functions\n * @param {EditorActionArgs} args - Arguments containing editor reference\n * @returns {void | Promise<void>}\n */\nexport type EditorAction = (args: EditorActionArgs) => void | Promise<void>;\n\n/**\n * Main InkEditor class that provides a rich markdown editing experience\n * with toolbar buttons, snippets, and preview functionality.\n */\nexport class InkEditor {\n    /** Store for toolbar buttons */\n    #toolbar: ListStore<ButtonSpec> | undefined;\n\n    /** Map of registered editor actions by name */\n    #actions: Map<string, EditorAction>;\n\n    /** Root element for CodeMirror editor */\n    #cmRoot: HTMLElement;\n\n    /** Parent element containing the editor */\n    parent: HTMLElement;\n\n    /** The underlying CodeMirror editor instance */\n    editor: EditorView;\n\n    /** Whether editor is in compact mode */\n    isCompact: boolean;\n\n    /** Store controlling snippet panel visibility */\n    snippetsOpen: Store<boolean> | undefined;\n\n    /** Editor configuration options */\n    options: InkOptions;\n\n    /** Preview state and controls */\n    preview: {\n        /** Store for preview content */\n        contents: Store<string>;\n        /** Store controlling preview visibility */\n        visibility: Store<boolean>;\n    }\n\n    /** Function to toggle read-only state */\n    setReadOnly: (state: boolean) => void;\n\n    /**\n     * Creates a new InkEditor instance\n     * @param {HTMLElement | string} root - Container element or selector for the editor\n     * @param {Partial<InkOptions>} [userOptions] - Custom editor options\n     */\n    constructor(root: HTMLElement | string, userOptions?: Partial<InkOptions>) {\n        this.options = Object.assign({}, DEFAULT_ARGS, userOptions);\n        this.parent = getRootElt(root);\n\n        this.parent.classList.add('ink-root');\n        this.isCompact = this.parent.classList.contains('compact');\n        const [_, snippets, ctrls, preview, cmRoot, editorWrapper] = cf.extend(this.parent, {\n            raw: true,\n            gimme: ['.ink-snippets', '.ink-ctrl-btns', '.ink-preview', '.ink-editor', '.ink-editor-wrapper'],\n            contents: cf.html`\n            <div class=ink-editor-wrapper>\n                <div class=\"ink-ctrl-btns\"></div>\n                <div class=\"ink-preview\"></div>\n                <div class=\"ink-snippets\"></div>\n                <div class=\"ink-editor\"></div>\n            </div>`,\n            style: {\n                width: this.options.width,\n                height: this.options.height\n            }\n        });\n        this.#cmRoot = cmRoot;\n\n        this.preview = PreviewController(preview, this.options.makePreview);\n        this.#actions = new Map();\n\n        if (!this.options.toolbar) ctrls.remove();\n        else this.#toolbar = ToolbarButtons(ctrls, this, this.options.toolbar);\n\n        if (!this.options.enableSnippets) snippets.remove();\n        else this.snippetsOpen = SnippetView(snippets, this, this.options.snippets);\n\n        if (this.options.enableDefaultActions) Object.entries(EDITOR_DEFAULT_ACTIONS).forEach(\n            ([k, v]) => this.registerAction(k, v));\n\n        const { view, setReadOnly } = createCmEditor({\n            placeholder: this.options.placeholder,\n            onAutosave: debounce(this.options.onAutosave, this.options.autosaveDelayMs),\n            parent: cmRoot,\n            fontFamily: this.options.fontFamily\n        });\n\n        this.editor = view;\n        this.setReadOnly = setReadOnly;\n\n        this.initialize();\n    }\n\n    /**\n     * Initializes the editor with saved or default content\n     * @returns {Promise<void>}\n     */\n    async initialize() {\n        const saved = await this.options.retrieveSaved();\n        if (saved) {\n            this.setContents(saved);\n        }\n        else {\n            this.setContents(this.options.defaultContents);\n        }\n    }\n\n    /**\n     * Executes a registered editor action by name\n     * @param {string} name - Name of the action to execute\n     */\n    action(name: string) {\n        const action = this.#actions.get(name);\n        if (!action) {\n            console.warn('Action', name, 'called, but no such action exists.');\n            return;\n        }\n\n        action({ editor: this });\n    }\n\n    /**\n     * Registers a new button in the toolbar\n     * @param {ButtonArgs} btn - Button configuration\n     */\n    registerButton(btn: ButtonArgs) {\n        this.#toolbar?.push(btn);\n    }\n\n    /**\n     * Registers a new editor action\n     * @param {string} name - Unique name for the action\n     * @param {EditorAction} action - Function to execute when action is triggered\n     */\n    registerAction(name: string, action: EditorAction) {\n        this.#actions.set(name, action);\n    }\n\n    /**\n     * Removes a registered action\n     * @param {string} name - Name of the action to remove\n     */\n    deregisterAction(name: string) {\n        this.#actions.delete(name);\n    }\n\n    /**\n     * Provides methods for inserting content at various positions in the editor\n     */\n    get insert() {\n        return {\n            /**\n             * Inserts text before the current cursor position\n             * @param {string} insertion - Text to insert\n             * @param {number} [cursorOffset=insertion.length] - Where to place cursor after insertion\n             */\n            before: (insertion: string, cursorOffset = insertion.length) => {\n                const { cursor } = getDocAndCursor(this.editor);\n                insertBefore(this.editor, cursor!, insertion, cursorOffset);\n            },\n\n            /**\n             * Wraps selected text with start and end strings\n             * @param {string} start - Text to insert before selection\n             * @param {string} [end=start] - Text to insert after selection (defaults to start)\n             */\n            around: (start: string, end = start) => {\n                const { cursor } = getDocAndCursor(this.editor);\n                insertAround(this.editor, cursor!, start, end);\n            },\n\n            /**\n             * Inserts text at the current cursor position\n             * @param {string} str - Text to insert\n             */\n            at: (str: string) => {\n                const { cursor } = getDocAndCursor(this.editor);\n                this.editor.dispatch({\n                    changes: {\n                        from: cursor!,\n                        to: cursor!,\n                        insert: str\n                    }\n                })\n            },\n\n            /**\n             * Inserts text with proper newline handling\n             * @param {string} text - Text to insert\n             */\n            withNewline: (text: string) => insertWithNewline(this.editor, text)\n        }\n    }\n\n    /**\n     * Gets the current editor contents as a string\n     * @returns {string} Current editor contents\n     */\n    getContents() {\n        return this.editor.state.doc.toString();\n    }\n\n    /**\n     * Sets the editor content\n     * @param {string} contents - New content to set\n     */\n    setContents(contents: string) {\n        this.editor.dispatch({\n            changes: { from: 0, to: this.editor.state.doc.length, insert: contents }\n        });\n    }\n\n    /**\n     * Shows or hides the editor\n     * @param {boolean} state - Whether editor should be visible\n     */\n    setEditorVisibility(state: boolean) {\n        this.#cmRoot.classList.toggle('hidden', !state);\n    }\n\n    /**\n     * Disables all toolbar buttons except one\n     * @param {number} target - Index of button to keep enabled\n     */\n    disableButtonsExcept(target: number) {\n        this.#toolbar?.value.forEach((btn, idx) => {\n            if (idx === target) return;\n            this.#toolbar?.set(idx, { ...btn, disabled: true });\n        })\n    }\n\n    /**\n     * Enables all toolbar buttons\n     */\n    enableButtons() {\n        this.#toolbar?.value.forEach((btn, idx) => {\n            this.#toolbar?.set(idx, { ...btn, disabled: false })\n        })\n    }\n}", "import { EditorView, keymap, placeholder } from \"@codemirror/view\";\nimport { syntaxHighlighting, defaultHighlightStyle } from \"@codemirror/language\";\nimport { EditorState, Compartment } from \"@codemirror/state\"\nimport { markdown, markdownLanguage } from \"@codemirror/lang-markdown\";\nimport type { InkOptions } from \"../InkEditor.ts\";\nimport { defaultKeymap, history, historyKeymap, indentWithTab } from \"@codemirror/commands\";\nimport { tags } from \"@lezer/highlight\";\nimport { HighlightStyle } from \"@codemirror/language\";\n\nexport const getDocAndCursor = (editor: EditorView) => ({\n    doc: editor.state.doc,\n    cursor: editor.state.selection.main.head\n})\n\nexport const posToOffset = (e: EditorView, pos: { line: number, ch: number }) => {\n    const doc = e.state.doc;\n    return doc.line(pos.line + 1).from + pos.ch;\n}\n\nexport const offsetToPos = (e: EditorView, offset: number) => {\n    const doc = e.state.doc;\n    let line = doc.lineAt(offset);\n    return { line: line.number - 1, ch: offset - line.from }\n}\n\nexport const getLineOffset = (editor: EditorView, offset: number) => {\n    const p = offsetToPos(editor, offset);\n    p.ch = 0;\n    const newOffset = posToOffset(editor, p);\n    return newOffset;\n}\n\nexport const hasSelection = (editor: EditorView) => editor.state.selection.ranges.some(r => !r.empty);\n\nexport const insertBefore = (\n    editor: EditorView, cursor: number, insertion: string, cursorOffset = insertion.length\n) => {\n    if (!hasSelection(editor)) {\n        const offset = getLineOffset(editor, cursor);\n        editor.dispatch({ changes: { from: offset, to: offset, insert: insertion } });\n        editor.dispatch({ selection: { anchor: offset + (cursorOffset || 0) } });\n        return;\n    }\n\n    editor.state.selection.ranges.forEach((selection) => {\n        [selection.head, selection.anchor].toSorted().forEach((pos, i) => {\n            const offset = getLineOffset(editor, i);\n            editor.dispatch({ changes: { from: offset, to: offset, insert: insertion } })\n\n            if (i == 0) {\n                const selection = {\n                    anchor: posToOffset(editor, { line: pos, ch: cursorOffset || 0 })\n                }\n                editor.dispatch({ selection });\n            }\n        });\n    });\n}\n\nexport const insertAround = (editor: EditorView, cursor: number, start: string, end = start) => {\n    if (hasSelection(editor)) {\n        const selection = editor.state.sliceDoc(\n            editor.state.selection.main.from,\n            editor.state.selection.main.to);\n        editor.dispatch(editor.state.replaceSelection(start + selection + end));\n    } else {\n        editor.dispatch({\n            changes: {\n                from: cursor, to: cursor, insert: start + end\n            }\n        })\n        editor.dispatch({ selection: { anchor: editor.state.selection.main.head + start.length } })\n    }\n\n    editor.focus();\n}\n\nexport const insertWithNewline = (editor: EditorView, text: string) => {\n    const { doc, cursor } = getDocAndCursor(editor);\n    const pos = offsetToPos(editor, cursor!);\n    pos.ch = doc.lineAt(cursor!).length;\n    const newPos = posToOffset(editor, pos);\n    editor.dispatch({\n        changes: { from: newPos, to: newPos, insert: `\\n${text}` }\n    });\n}\n\ninterface CmEditorOptions {\n    placeholder: string,\n    onAutosave: InkOptions['onAutosave'],\n    fontFamily: string,\n    parent: HTMLElement\n};\n\nconst theme = (fontFamily: string) => EditorView.theme({\n    \"&\": {\n        fontSize: \"1rem\",\n        color: \"black\",\n        height: \"100%\",\n        overflow: \"auto\",\n        backgroundColor: \"white\"\n    },\n    \".cm-content\": {\n        fontFamily,\n    },\n})\n\nconst headingStyles = HighlightStyle.define([\n    {\n        tag: tags.heading1,\n        color: 'black',\n        fontSize: '1.75rem',\n        fontWeight: '700',\n    },\n    {\n        tag: tags.heading2,\n        color: 'black',\n        fontSize: '1.6rem',\n        fontWeight: '700',\n    },\n    {\n        tag: tags.heading3,\n        color: 'black',\n        fontSize: '1.5rem',\n        fontWeight: '700',\n    },\n    {\n        tag: tags.heading4,\n        color: 'black',\n        fontSize: '1.4rem',\n        fontWeight: '700',\n    },\n    {\n        tag: tags.heading5,\n        color: 'black',\n        fontSize: '1.2rem',\n        fontWeight: '700',\n    },\n    {\n        tag: tags.heading6,\n        color: 'black',\n        fontSize: '1.1rem',\n        fontWeight: '700',\n    },\n]);\n\nexport const getExtensions = (ph: string, autosave: InkOptions['onAutosave'], fontFamily: string) => [\n    history(),\n    keymap.of([\n        ...defaultKeymap,\n        ...historyKeymap,\n        indentWithTab\n    ]),\n    markdown({ base: markdownLanguage }),\n    syntaxHighlighting(defaultHighlightStyle),\n    syntaxHighlighting(headingStyles),\n    placeholder(ph),\n    EditorView.updateListener.of(async (u) => await autosave(u.state.doc.toString())),\n    EditorView.lineWrapping,\n    theme(fontFamily)\n];\n\nexport const createCmEditor = ({ placeholder, onAutosave, fontFamily, parent }: CmEditorOptions) => {\n    const compartments = {\n        readOnly: new Compartment()\n    }\n\n    const setReadOnly = (state: boolean) => {\n        view.dispatch({\n            effects: compartments.readOnly.reconfigure(EditorState.readOnly.of(state))\n        })\n    }\n\n    const view = new EditorView({\n        extensions: [\n            compartments.readOnly.of(EditorState.readOnly.of(false)),\n            ...getExtensions(placeholder, onAutosave, fontFamily)\n        ],\n        parent\n    });\n\n    return { view, setReadOnly };\n}\n", "import type { EditorAction, InkOptions } from \"./InkEditor.ts\";\nimport type { ButtonSpec } from \"./components/EditorButton.ts\";\n\nexport const DEFAULT_ARGS: InkOptions = {\n    toolbar: true,\n    enableDefaultActions: true,\n    defaultContents: '',\n    enableSnippets: false,\n    fontFamily: 'monospace',\n    height: '100svh',\n    width: '100svw',\n    snippets: [],\n    onAutosave: (contents) => {\n        localStorage.setItem('ink-contents', contents);\n        console.log('autosaving...');\n    },\n    onDone: _ => { },\n    onExit: _ => { },\n    retrieveSaved: () => localStorage.getItem('ink-contents') || '',\n    makePreview: c => c,\n    autosaveDelayMs: 1000,\n    placeholder: 'Welcome to Ink!'\n}\n\nexport const EDITOR_DEFAULT_ACTIONS: Record<string, EditorAction> = {\n    \"bold\": ({ editor }) => editor.insert.around(\"**\"),\n    \"italic\": ({ editor }) => editor.insert.around(\"_\"),\n    \"strikethrough\": ({ editor }) => editor.insert.around(\"~~\"),\n    \"quote\": ({ editor }) => editor.insert.before(\"> \"),\n    \"a\": ({ editor }) => editor.insert.at(\"[Link text](Link url)\"),\n    \"h1\": ({ editor }) => editor.insert.before('# ', 2),\n    \"h2\": ({ editor }) => editor.insert.before('## ', 3),\n    \"h3\": ({ editor }) => editor.insert.before('### ', 4),\n    \"h4\": ({ editor }) => editor.insert.before('#### ', 5),\n    \"h5\": ({ editor }) => editor.insert.before('##### ', 6),\n    \"h6\": ({ editor }) => editor.insert.before('###### ', 7),\n    \"snippetmenu\": ({ editor }) => editor.snippetsOpen?.update(true),\n    \"done\": ({ editor }) => editor.options.onDone(editor.getContents()),\n    \"exit\": ({ editor }) => editor.options.onExit(editor.getContents()),\n    \"toggle_preview\": ({ editor }) => {\n        const visibility = editor.preview.visibility.value;\n        editor.preview.visibility.update(!visibility);\n        /* value is flipped now so we have to work with negating the old value */\n        if (!visibility) editor.preview.contents.update(editor.getContents());\n        editor.setEditorVisibility(visibility);\n    },\n    \"reset\": ({ editor }) => {\n        editor.setContents(editor.options.defaultContents);\n    }\n}\n\nexport const EDITOR_DEFAULT_BUTTONS: Array<ButtonSpec> = [\n    {\n        action: 'bold',\n        iconName: 'Bold',\n        label: 'Bold',\n        description: 'Make text bold'\n    },\n    {\n        action: 'italic',\n        iconName: 'Italic',\n        label: 'Italic',\n        description: 'Make text italic'\n    },\n    {\n        action: 'strikethrough',\n        iconName: 'Strikethrough',\n        label: 'Strikethrough',\n        description: 'Add strikethrough to text'\n    },\n    {\n        action: 'quote',\n        iconName: 'Quote',\n        label: 'Quote',\n        description: 'Insert a blockquote'\n    },\n    {\n        action: 'a',\n        iconName: 'Link',\n        label: 'Link',\n        description: 'Insert a hyperlink'\n    },\n    {\n        action: 'h1',\n        iconName: 'Heading',\n        label: 'Heading 1',\n        description: 'Insert a level 1 heading'\n    },\n    {\n        action: 'h2',\n        iconName: 'Heading2',\n        label: 'Heading 2',\n        description: 'Insert a level 2 heading'\n    },\n    {\n        action: 'snippetmenu',\n        iconName: 'Scissors',\n        label: 'Snippets',\n        description: 'Open snippets menu'\n    },\n    {\n        action: \"reset\",\n        iconName: \"RotateCcw\",\n        description: \"Reset to default contents\",\n        label: \"Default\"\n    },\n    {\n        'action': 'toggle_preview',\n        iconName: 'Eye',\n        label: 'Preview',\n        description: 'Toggle preview mode',\n        toggle: true,\n        modal: true\n    },\n    {\n        'action': 'done',\n        iconName: 'Check',\n        label: 'Done',\n        description: 'Finish editing and apply changes'\n    },\n    {\n        'action': 'exit',\n        iconName: 'X',\n        label: 'Exit',\n        description: 'Exit editor without applying changes'\n    },\n];", "import cf from \"campfire.js\";\nimport { icon } from \"../utils/misc.ts\";\nimport { InkEditor } from \"../InkEditor.ts\";\n\nexport const SnippetView = (parent: HTMLElement, editor: InkEditor, snippets: string[]) => {\n    const visibility = cf.store({ value: false });\n\n    visibility.on('update', (event) => {\n        console.log(event);\n        parent.classList.toggle('hidden', !event.value);\n    });\n\n    const handleInteraction = (target: HTMLElement) => {\n        console.log(target.closest('.snippets-close'));\n        if (target.classList.contains('snippet-item'))\n            editor.insert.withNewline(target.innerHTML);\n        else if (target.closest('.snippets-close')) {\n            visibility.update(false);\n        }\n    };\n\n    const snippetList = snippets.map(snippet =>\n        cf.html`<div class=\"snippet-item\" tabindex=\"0\">${snippet}</div>`\n    ).join('');\n\n    cf.extend(parent, {\n        raw: true,\n        contents: cf.html`\n        <div class='snippets-content'>\n            <div class='snippets-header'>\n                <div class='snippets-title'><strong>Snippets</strong></div>\n                <div class='snippets-close' tabindex=\"0\">${icon('X')}</div>\n            </div>\n            <div class='snippets-body'>\n                <div class='snippets-list'>\n                    ${cf.r(snippetList)}\n                </div>\n            </div>\n        </div>`,\n        on: {\n            click: (e: MouseEvent) => handleInteraction(e.target as HTMLElement),\n            keyup: (e: KeyboardEvent) => {\n                if (e.key === 'Enter') handleInteraction(e.target as HTMLElement);\n            }\n        }\n    });\n\n    return visibility;\n}", "import cf from \"campfire.js\";\nimport { EDITOR_DEFAULT_BUTTONS } from \"../defaults.ts\";\nimport { InkOptions } from \"../InkEditor.ts\";\nimport { InkEditor } from \"../mod.ts\";\nimport { ButtonSpec, EditorButton } from \"./EditorButton.ts\";\n\nexport const ToolbarButtons = (container: HTMLElement, editor: InkEditor, settings: InkOptions['toolbar']) => {\n    const store = cf.store<ButtonSpec>({ type: \"list\" });\n\n    store.on(\"append\", ({ value, idx }) => {\n        cf.insert(EditorButton({ ...value, idx, editor, showLabel: !editor.isCompact }),\n            { into: container });\n    });\n\n    store.on(\"change\", ({ value, idx }) => {\n        const elt = container.querySelector(`button[data-btn-idx=\"${idx}\"]`) as HTMLElement;\n        if (elt) {\n            elt.toggleAttribute('disabled', !!value.disabled);\n        }\n    });\n\n    store.on(\"deletion\", ({ idx }) => {\n        const button = container.querySelector(`button[data-btn-idx=\"${idx}\"]`);\n        if (button) {\n            cf.rm(button);\n        }\n    });\n\n    if (typeof settings === 'object' && !settings.defaults) {\n        return store;\n    }\n\n    EDITOR_DEFAULT_BUTTONS.forEach(btn => store.push(btn));\n\n    return store;\n}", "import cf from 'campfire.js';\nimport { InkEditor } from '../mod.ts';\nimport { icon } from '../utils/misc.ts';\nimport { Icons } from '../utils/icons.ts';\n\nexport interface ButtonArgs {\n    editor: InkEditor,\n    iconName: keyof typeof Icons,\n    action: string,\n    label: string,\n    showLabel?: boolean,\n    idx: number,\n    description: string,\n    toggle?: boolean,\n    modal?: boolean,\n    disabled?: boolean\n}\n\nexport type ButtonSpec = Omit<ButtonArgs, 'editor' | 'showLabel' | 'idx'>;\n\nexport const EditorButton = ({ modal, toggle, editor, iconName, action, description, label, showLabel, idx, disabled }: ButtonArgs) => {\n    let toggleState = false;\n\n    const [elt] = cf.nu(\"button.ink-button\")\n        .attr(\"data-ink-action\", action)\n        .attr(\"title\", description)\n        .attr(\"data-btn-idx\", idx.toString())\n        .html(cf.html`${icon(iconName)}<span>${showLabel ? `${label}` : ''}</span>`)\n        .on(\"click\", (e) => {\n            editor.action(action);\n            if (!toggle) return;\n            toggleState = !toggleState;\n            elt.classList.toggle('toggled', toggleState);\n            modal ? editor.disableButtonsExcept(idx) : editor.enableButtons();\n        })\n        .done();\n\n    if (disabled) elt.setAttribute('disabled', '');\n\n    return [elt];\n}", "import cf from \"campfire.js\";\n\nexport const PreviewController = (root: HTMLElement, parse: (contents: string) => string | Promise<string>) => {\n    const contents = cf.store({ value: '' });\n    const visibility = cf.store({ value: false });\n\n    visibility.on(\"change\", (event) => {\n        root.classList.toggle('hidden', !event.value);\n    });\n\n    contents.on(\"change\", async (event) => {\n        const parsed = await parse(event.value);\n        cf.extend(root, {\n            contents: cf.html`<div class='ink-preview-wrapper'>${cf.r(parsed)}</div>`,\n            raw: true\n        });\n    });\n\n    return { contents, visibility };\n}", "import { InkEditor } from './InkEditor.ts';\nexport { InkEditor };\nexport default { InkEditor };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA,EACI;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACG;AAKP,IAAM,YAAY;AAAA,EACd;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAKO,IAAM,QAAQ,OAAO;AAAA,EACxB,OAAO,QAAQ,SAAS,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM;AACtC,UAAM,MAAM,cAAc,CAAC;AAC3B,QAAI,UAAU,IAAI,aAAa;AAC/B,WAAO,CAAC,GAAG,IAAI,SAAS;AAAA,EAC5B,CAAC;AACL;;;ACpCO,IAAM,aAAa,CAAC,SAA4C;AACnE,MAAI,OAAO,SAAS,UAAU;AAC1B,UAAM,MAAM,SAAS,cAAc,IAAI;AACvC,QAAI,QAAQ;AAAM,YAAM,IAAI,MAAM,8CAA8C;AAChF,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAOO,IAAM,OAAO,CAAC,SAA6B;AAC9C,SAAO,EAAE,KAAK,MAAM,UAAU,MAAM,IAAI,EAAE;AAC9C;AAQO,SAAS,SAAS,MAAgB,OAA2B;AAChE,MAAI;AACJ,SAAO,YAAa,MAAa;AAC7B,iBAAa,KAAK;AAClB,YAAQ,OAAO,WAAW,MAAM;AAC5B,WAAK,MAAM,MAAM,IAAI;AAAA,IACzB,GAAG,SAAS,CAAC;AAAA,EACjB;AACJ;;;AChCA,OAAOA,SAA8B;;;ACPrC,SAAS,YAAY,QAAQ,mBAAmB;AAChD,SAAS,oBAAoB,6BAA6B;AAC1D,SAAS,aAAa,mBAAmB;AACzC,SAAS,UAAU,wBAAwB;AAE3C,SAAS,eAAe,SAAS,eAAe,qBAAqB;AACrE,SAAS,YAAY;AACrB,SAAS,sBAAsB;AAExB,IAAM,kBAAkB,CAAC,YAAwB;AAAA,EACpD,KAAK,OAAO,MAAM;AAAA,EAClB,QAAQ,OAAO,MAAM,UAAU,KAAK;AACxC;AAEO,IAAM,cAAc,CAAC,GAAe,QAAsC;AAC7E,QAAM,MAAM,EAAE,MAAM;AACpB,SAAO,IAAI,KAAK,IAAI,OAAO,CAAC,EAAE,OAAO,IAAI;AAC7C;AAEO,IAAM,cAAc,CAAC,GAAe,WAAmB;AAC1D,QAAM,MAAM,EAAE,MAAM;AACpB,MAAI,OAAO,IAAI,OAAO,MAAM;AAC5B,SAAO,EAAE,MAAM,KAAK,SAAS,GAAG,IAAI,SAAS,KAAK,KAAK;AAC3D;AAEO,IAAM,gBAAgB,CAAC,QAAoB,WAAmB;AACjE,QAAM,IAAI,YAAY,QAAQ,MAAM;AACpC,IAAE,KAAK;AACP,QAAM,YAAY,YAAY,QAAQ,CAAC;AACvC,SAAO;AACX;AAEO,IAAM,eAAe,CAAC,WAAuB,OAAO,MAAM,UAAU,OAAO,KAAK,OAAK,CAAC,EAAE,KAAK;AAE7F,IAAM,eAAe,CACxB,QAAoB,QAAgB,WAAmB,eAAe,UAAU,WAC/E;AACD,MAAI,CAAC,aAAa,MAAM,GAAG;AACvB,UAAM,SAAS,cAAc,QAAQ,MAAM;AAC3C,WAAO,SAAS,EAAE,SAAS,EAAE,MAAM,QAAQ,IAAI,QAAQ,QAAQ,UAAU,EAAE,CAAC;AAC5E,WAAO,SAAS,EAAE,WAAW,EAAE,QAAQ,UAAU,gBAAgB,GAAG,EAAE,CAAC;AACvE;AAAA,EACJ;AAEA,SAAO,MAAM,UAAU,OAAO,QAAQ,CAAC,cAAc;AACjD,KAAC,UAAU,MAAM,UAAU,MAAM,EAAE,SAAS,EAAE,QAAQ,CAAC,KAAK,MAAM;AAC9D,YAAM,SAAS,cAAc,QAAQ,CAAC;AACtC,aAAO,SAAS,EAAE,SAAS,EAAE,MAAM,QAAQ,IAAI,QAAQ,QAAQ,UAAU,EAAE,CAAC;AAE5E,UAAI,KAAK,GAAG;AACR,cAAMC,aAAY;AAAA,UACd,QAAQ,YAAY,QAAQ,EAAE,MAAM,KAAK,IAAI,gBAAgB,EAAE,CAAC;AAAA,QACpE;AACA,eAAO,SAAS,EAAE,WAAAA,WAAU,CAAC;AAAA,MACjC;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AACL;AAEO,IAAM,eAAe,CAAC,QAAoB,QAAgB,OAAe,MAAM,UAAU;AAC5F,MAAI,aAAa,MAAM,GAAG;AACtB,UAAM,YAAY,OAAO,MAAM;AAAA,MAC3B,OAAO,MAAM,UAAU,KAAK;AAAA,MAC5B,OAAO,MAAM,UAAU,KAAK;AAAA,IAAE;AAClC,WAAO,SAAS,OAAO,MAAM,iBAAiB,QAAQ,YAAY,GAAG,CAAC;AAAA,EAC1E,OAAO;AACH,WAAO,SAAS;AAAA,MACZ,SAAS;AAAA,QACL,MAAM;AAAA,QAAQ,IAAI;AAAA,QAAQ,QAAQ,QAAQ;AAAA,MAC9C;AAAA,IACJ,CAAC;AACD,WAAO,SAAS,EAAE,WAAW,EAAE,QAAQ,OAAO,MAAM,UAAU,KAAK,OAAO,MAAM,OAAO,EAAE,CAAC;AAAA,EAC9F;AAEA,SAAO,MAAM;AACjB;AAEO,IAAM,oBAAoB,CAAC,QAAoB,SAAiB;AACnE,QAAM,EAAE,KAAK,OAAO,IAAI,gBAAgB,MAAM;AAC9C,QAAM,MAAM,YAAY,QAAQ,MAAO;AACvC,MAAI,KAAK,IAAI,OAAO,MAAO,EAAE;AAC7B,QAAM,SAAS,YAAY,QAAQ,GAAG;AACtC,SAAO,SAAS;AAAA,IACZ,SAAS,EAAE,MAAM,QAAQ,IAAI,QAAQ,QAAQ;AAAA,EAAK,OAAO;AAAA,EAC7D,CAAC;AACL;AASA,IAAM,QAAQ,CAAC,eAAuB,WAAW,MAAM;AAAA,EACnD,KAAK;AAAA,IACD,UAAU;AAAA,IACV,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,iBAAiB;AAAA,EACrB;AAAA,EACA,eAAe;AAAA,IACX;AAAA,EACJ;AACJ,CAAC;AAED,IAAM,gBAAgB,eAAe,OAAO;AAAA,EACxC;AAAA,IACI,KAAK,KAAK;AAAA,IACV,OAAO;AAAA,IACP,UAAU;AAAA,IACV,YAAY;AAAA,EAChB;AAAA,EACA;AAAA,IACI,KAAK,KAAK;AAAA,IACV,OAAO;AAAA,IACP,UAAU;AAAA,IACV,YAAY;AAAA,EAChB;AAAA,EACA;AAAA,IACI,KAAK,KAAK;AAAA,IACV,OAAO;AAAA,IACP,UAAU;AAAA,IACV,YAAY;AAAA,EAChB;AAAA,EACA;AAAA,IACI,KAAK,KAAK;AAAA,IACV,OAAO;AAAA,IACP,UAAU;AAAA,IACV,YAAY;AAAA,EAChB;AAAA,EACA;AAAA,IACI,KAAK,KAAK;AAAA,IACV,OAAO;AAAA,IACP,UAAU;AAAA,IACV,YAAY;AAAA,EAChB;AAAA,EACA;AAAA,IACI,KAAK,KAAK;AAAA,IACV,OAAO;AAAA,IACP,UAAU;AAAA,IACV,YAAY;AAAA,EAChB;AACJ,CAAC;AAEM,IAAM,gBAAgB,CAAC,IAAY,UAAoC,eAAuB;AAAA,EACjG,QAAQ;AAAA,EACR,OAAO,GAAG;AAAA,IACN,GAAG;AAAA,IACH,GAAG;AAAA,IACH;AAAA,EACJ,CAAC;AAAA,EACD,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAAA,EACnC,mBAAmB,qBAAqB;AAAA,EACxC,mBAAmB,aAAa;AAAA,EAChC,YAAY,EAAE;AAAA,EACd,WAAW,eAAe,GAAG,OAAO,MAAM,MAAM,SAAS,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC;AAAA,EAChF,WAAW;AAAA,EACX,MAAM,UAAU;AACpB;AAEO,IAAM,iBAAiB,CAAC,EAAE,aAAAC,cAAa,YAAY,YAAY,OAAO,MAAuB;AAChG,QAAM,eAAe;AAAA,IACjB,UAAU,IAAI,YAAY;AAAA,EAC9B;AAEA,QAAM,cAAc,CAAC,UAAmB;AACpC,SAAK,SAAS;AAAA,MACV,SAAS,aAAa,SAAS,YAAY,YAAY,SAAS,GAAG,KAAK,CAAC;AAAA,IAC7E,CAAC;AAAA,EACL;AAEA,QAAM,OAAO,IAAI,WAAW;AAAA,IACxB,YAAY;AAAA,MACR,aAAa,SAAS,GAAG,YAAY,SAAS,GAAG,KAAK,CAAC;AAAA,MACvD,GAAG,cAAcA,cAAa,YAAY,UAAU;AAAA,IACxD;AAAA,IACA;AAAA,EACJ,CAAC;AAED,SAAO,EAAE,MAAM,YAAY;AAC/B;;;ACnLO,IAAM,eAA2B;AAAA,EACpC,SAAS;AAAA,EACT,sBAAsB;AAAA,EACtB,iBAAiB;AAAA,EACjB,gBAAgB;AAAA,EAChB,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,UAAU,CAAC;AAAA,EACX,YAAY,CAAC,aAAa;AACtB,iBAAa,QAAQ,gBAAgB,QAAQ;AAC7C,YAAQ,IAAI,eAAe;AAAA,EAC/B;AAAA,EACA,QAAQ,OAAK;AAAA,EAAE;AAAA,EACf,QAAQ,OAAK;AAAA,EAAE;AAAA,EACf,eAAe,MAAM,aAAa,QAAQ,cAAc,KAAK;AAAA,EAC7D,aAAa,OAAK;AAAA,EAClB,iBAAiB;AAAA,EACjB,aAAa;AACjB;AAEO,IAAM,yBAAuD;AAAA,EAChE,QAAQ,CAAC,EAAE,OAAO,MAAM,OAAO,OAAO,OAAO,IAAI;AAAA,EACjD,UAAU,CAAC,EAAE,OAAO,MAAM,OAAO,OAAO,OAAO,GAAG;AAAA,EAClD,iBAAiB,CAAC,EAAE,OAAO,MAAM,OAAO,OAAO,OAAO,IAAI;AAAA,EAC1D,SAAS,CAAC,EAAE,OAAO,MAAM,OAAO,OAAO,OAAO,IAAI;AAAA,EAClD,KAAK,CAAC,EAAE,OAAO,MAAM,OAAO,OAAO,GAAG,uBAAuB;AAAA,EAC7D,MAAM,CAAC,EAAE,OAAO,MAAM,OAAO,OAAO,OAAO,MAAM,CAAC;AAAA,EAClD,MAAM,CAAC,EAAE,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,CAAC;AAAA,EACnD,MAAM,CAAC,EAAE,OAAO,MAAM,OAAO,OAAO,OAAO,QAAQ,CAAC;AAAA,EACpD,MAAM,CAAC,EAAE,OAAO,MAAM,OAAO,OAAO,OAAO,SAAS,CAAC;AAAA,EACrD,MAAM,CAAC,EAAE,OAAO,MAAM,OAAO,OAAO,OAAO,UAAU,CAAC;AAAA,EACtD,MAAM,CAAC,EAAE,OAAO,MAAM,OAAO,OAAO,OAAO,WAAW,CAAC;AAAA,EACvD,eAAe,CAAC,EAAE,OAAO,MAAM,OAAO,cAAc,OAAO,IAAI;AAAA,EAC/D,QAAQ,CAAC,EAAE,OAAO,MAAM,OAAO,QAAQ,OAAO,OAAO,YAAY,CAAC;AAAA,EAClE,QAAQ,CAAC,EAAE,OAAO,MAAM,OAAO,QAAQ,OAAO,OAAO,YAAY,CAAC;AAAA,EAClE,kBAAkB,CAAC,EAAE,OAAO,MAAM;AAC9B,UAAM,aAAa,OAAO,QAAQ,WAAW;AAC7C,WAAO,QAAQ,WAAW,OAAO,CAAC,UAAU;AAE5C,QAAI,CAAC;AAAY,aAAO,QAAQ,SAAS,OAAO,OAAO,YAAY,CAAC;AACpE,WAAO,oBAAoB,UAAU;AAAA,EACzC;AAAA,EACA,SAAS,CAAC,EAAE,OAAO,MAAM;AACrB,WAAO,YAAY,OAAO,QAAQ,eAAe;AAAA,EACrD;AACJ;AAEO,IAAM,yBAA4C;AAAA,EACrD;AAAA,IACI,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,IACI,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,aAAa;AAAA,IACb,OAAO;AAAA,EACX;AAAA,EACA;AAAA,IACI,UAAU;AAAA,IACV,UAAU;AAAA,IACV,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,OAAO;AAAA,EACX;AAAA,EACA;AAAA,IACI,UAAU;AAAA,IACV,UAAU;AAAA,IACV,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AAAA,EACA;AAAA,IACI,UAAU;AAAA,IACV,UAAU;AAAA,IACV,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AACJ;;;AC9HA,OAAO,QAAQ;AAIR,IAAM,cAAc,CAAC,QAAqB,QAAmB,aAAuB;AACvF,QAAM,aAAa,GAAG,MAAM,EAAE,OAAO,MAAM,CAAC;AAE5C,aAAW,GAAG,UAAU,CAAC,UAAU;AAC/B,YAAQ,IAAI,KAAK;AACjB,WAAO,UAAU,OAAO,UAAU,CAAC,MAAM,KAAK;AAAA,EAClD,CAAC;AAED,QAAM,oBAAoB,CAAC,WAAwB;AAC/C,YAAQ,IAAI,OAAO,QAAQ,iBAAiB,CAAC;AAC7C,QAAI,OAAO,UAAU,SAAS,cAAc;AACxC,aAAO,OAAO,YAAY,OAAO,SAAS;AAAA,aACrC,OAAO,QAAQ,iBAAiB,GAAG;AACxC,iBAAW,OAAO,KAAK;AAAA,IAC3B;AAAA,EACJ;AAEA,QAAM,cAAc,SAAS;AAAA,IAAI,aAC7B,GAAG,8CAA8C;AAAA,EACrD,EAAE,KAAK,EAAE;AAET,KAAG,OAAO,QAAQ;AAAA,IACd,KAAK;AAAA,IACL,UAAU,GAAG;AAAA;AAAA;AAAA;AAAA,2DAIsC,KAAK,GAAG;AAAA;AAAA;AAAA;AAAA,sBAI7C,GAAG,EAAE,WAAW;AAAA;AAAA;AAAA;AAAA,IAI9B,IAAI;AAAA,MACA,OAAO,CAAC,MAAkB,kBAAkB,EAAE,MAAqB;AAAA,MACnE,OAAO,CAAC,MAAqB;AACzB,YAAI,EAAE,QAAQ;AAAS,4BAAkB,EAAE,MAAqB;AAAA,MACpE;AAAA,IACJ;AAAA,EACJ,CAAC;AAED,SAAO;AACX;;;AChDA,OAAOC,SAAQ;;;ACAf,OAAOC,SAAQ;AAoBR,IAAM,eAAe,CAAC,EAAE,OAAO,QAAQ,QAAQ,UAAU,QAAQ,aAAa,OAAO,WAAW,KAAK,SAAS,MAAkB;AACnI,MAAI,cAAc;AAElB,QAAM,CAAC,GAAG,IAAIC,IAAG,GAAG,mBAAmB,EAClC,KAAK,mBAAmB,MAAM,EAC9B,KAAK,SAAS,WAAW,EACzB,KAAK,gBAAgB,IAAI,SAAS,CAAC,EACnC,KAAKA,IAAG,OAAO,KAAK,QAAQ,UAAU,YAAY,GAAG,UAAU,WAAW,EAC1E,GAAG,SAAS,CAAC,MAAM;AAChB,WAAO,OAAO,MAAM;AACpB,QAAI,CAAC;AAAQ;AACb,kBAAc,CAAC;AACf,QAAI,UAAU,OAAO,WAAW,WAAW;AAC3C,YAAQ,OAAO,qBAAqB,GAAG,IAAI,OAAO,cAAc;AAAA,EACpE,CAAC,EACA,KAAK;AAEV,MAAI;AAAU,QAAI,aAAa,YAAY,EAAE;AAE7C,SAAO,CAAC,GAAG;AACf;;;ADlCO,IAAM,iBAAiB,CAAC,WAAwB,QAAmB,aAAoC;AAC1G,QAAM,QAAQC,IAAG,MAAkB,EAAE,MAAM,OAAO,CAAC;AAEnD,QAAM,GAAG,UAAU,CAAC,EAAE,OAAO,IAAI,MAAM;AACnC,IAAAA,IAAG;AAAA,MAAO,aAAa,EAAE,GAAG,OAAO,KAAK,QAAQ,WAAW,CAAC,OAAO,UAAU,CAAC;AAAA,MAC1E,EAAE,MAAM,UAAU;AAAA,IAAC;AAAA,EAC3B,CAAC;AAED,QAAM,GAAG,UAAU,CAAC,EAAE,OAAO,IAAI,MAAM;AACnC,UAAM,MAAM,UAAU,cAAc,wBAAwB,OAAO;AACnE,QAAI,KAAK;AACL,UAAI,gBAAgB,YAAY,CAAC,CAAC,MAAM,QAAQ;AAAA,IACpD;AAAA,EACJ,CAAC;AAED,QAAM,GAAG,YAAY,CAAC,EAAE,IAAI,MAAM;AAC9B,UAAM,SAAS,UAAU,cAAc,wBAAwB,OAAO;AACtE,QAAI,QAAQ;AACR,MAAAA,IAAG,GAAG,MAAM;AAAA,IAChB;AAAA,EACJ,CAAC;AAED,MAAI,OAAO,aAAa,YAAY,CAAC,SAAS,UAAU;AACpD,WAAO;AAAA,EACX;AAEA,yBAAuB,QAAQ,SAAO,MAAM,KAAK,GAAG,CAAC;AAErD,SAAO;AACX;;;AEnCA,OAAOC,SAAQ;AAER,IAAM,oBAAoB,CAAC,MAAmB,UAA0D;AAC3G,QAAM,WAAWA,IAAG,MAAM,EAAE,OAAO,GAAG,CAAC;AACvC,QAAM,aAAaA,IAAG,MAAM,EAAE,OAAO,MAAM,CAAC;AAE5C,aAAW,GAAG,UAAU,CAAC,UAAU;AAC/B,SAAK,UAAU,OAAO,UAAU,CAAC,MAAM,KAAK;AAAA,EAChD,CAAC;AAED,WAAS,GAAG,UAAU,OAAO,UAAU;AACnC,UAAM,SAAS,MAAM,MAAM,MAAM,KAAK;AACtC,IAAAA,IAAG,OAAO,MAAM;AAAA,MACZ,UAAUA,IAAG,wCAAwCA,IAAG,EAAE,MAAM;AAAA,MAChE,KAAK;AAAA,IACT,CAAC;AAAA,EACL,CAAC;AAED,SAAO,EAAE,UAAU,WAAW;AAClC;;;ANnBA;AA0IO,IAAM,YAAN,MAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyCnB,YAAY,MAA4B,aAAmC;AAvC3E;AAAA;AAGA;AAAA;AAGA;AAAA;AAkCI,SAAK,UAAU,OAAO,OAAO,CAAC,GAAG,cAAc,WAAW;AAC1D,SAAK,SAAS,WAAW,IAAI;AAE7B,SAAK,OAAO,UAAU,IAAI,UAAU;AACpC,SAAK,YAAY,KAAK,OAAO,UAAU,SAAS,SAAS;AACzD,UAAM,CAAC,GAAG,UAAU,OAAO,SAAS,QAAQ,aAAa,IAAIC,IAAG,OAAO,KAAK,QAAQ;AAAA,MAChF,KAAK;AAAA,MACL,OAAO,CAAC,iBAAiB,kBAAkB,gBAAgB,eAAe,qBAAqB;AAAA,MAC/F,UAAUA,IAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOb,OAAO;AAAA,QACH,OAAO,KAAK,QAAQ;AAAA,QACpB,QAAQ,KAAK,QAAQ;AAAA,MACzB;AAAA,IACJ,CAAC;AACD,uBAAK,SAAU;AAEf,SAAK,UAAU,kBAAkB,SAAS,KAAK,QAAQ,WAAW;AAClE,uBAAK,UAAW,oBAAI,IAAI;AAExB,QAAI,CAAC,KAAK,QAAQ;AAAS,YAAM,OAAO;AAAA;AACnC,yBAAK,UAAW,eAAe,OAAO,MAAM,KAAK,QAAQ,OAAO;AAErE,QAAI,CAAC,KAAK,QAAQ;AAAgB,eAAS,OAAO;AAAA;AAC7C,WAAK,eAAe,YAAY,UAAU,MAAM,KAAK,QAAQ,QAAQ;AAE1E,QAAI,KAAK,QAAQ;AAAsB,aAAO,QAAQ,sBAAsB,EAAE;AAAA,QAC1E,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,eAAe,GAAG,CAAC;AAAA,MAAC;AAEzC,UAAM,EAAE,MAAM,YAAY,IAAI,eAAe;AAAA,MACzC,aAAa,KAAK,QAAQ;AAAA,MAC1B,YAAY,SAAS,KAAK,QAAQ,YAAY,KAAK,QAAQ,eAAe;AAAA,MAC1E,QAAQ;AAAA,MACR,YAAY,KAAK,QAAQ;AAAA,IAC7B,CAAC;AAED,SAAK,SAAS;AACd,SAAK,cAAc;AAEnB,SAAK,WAAW;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,aAAa;AACf,UAAM,QAAQ,MAAM,KAAK,QAAQ,cAAc;AAC/C,QAAI,OAAO;AACP,WAAK,YAAY,KAAK;AAAA,IAC1B,OACK;AACD,WAAK,YAAY,KAAK,QAAQ,eAAe;AAAA,IACjD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,MAAc;AACjB,UAAM,SAAS,mBAAK,UAAS,IAAI,IAAI;AACrC,QAAI,CAAC,QAAQ;AACT,cAAQ,KAAK,UAAU,MAAM,oCAAoC;AACjE;AAAA,IACJ;AAEA,WAAO,EAAE,QAAQ,KAAK,CAAC;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe,KAAiB;AAC5B,uBAAK,WAAU,KAAK,GAAG;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,MAAc,QAAsB;AAC/C,uBAAK,UAAS,IAAI,MAAM,MAAM;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB,MAAc;AAC3B,uBAAK,UAAS,OAAO,IAAI;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,SAAS;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMH,QAAQ,CAAC,WAAmB,eAAe,UAAU,WAAW;AAC5D,cAAM,EAAE,OAAO,IAAI,gBAAgB,KAAK,MAAM;AAC9C,qBAAa,KAAK,QAAQ,QAAS,WAAW,YAAY;AAAA,MAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,QAAQ,CAAC,OAAe,MAAM,UAAU;AACpC,cAAM,EAAE,OAAO,IAAI,gBAAgB,KAAK,MAAM;AAC9C,qBAAa,KAAK,QAAQ,QAAS,OAAO,GAAG;AAAA,MACjD;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,IAAI,CAAC,QAAgB;AACjB,cAAM,EAAE,OAAO,IAAI,gBAAgB,KAAK,MAAM;AAC9C,aAAK,OAAO,SAAS;AAAA,UACjB,SAAS;AAAA,YACL,MAAM;AAAA,YACN,IAAI;AAAA,YACJ,QAAQ;AAAA,UACZ;AAAA,QACJ,CAAC;AAAA,MACL;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,aAAa,CAAC,SAAiB,kBAAkB,KAAK,QAAQ,IAAI;AAAA,IACtE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc;AACV,WAAO,KAAK,OAAO,MAAM,IAAI,SAAS;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,UAAkB;AAC1B,SAAK,OAAO,SAAS;AAAA,MACjB,SAAS,EAAE,MAAM,GAAG,IAAI,KAAK,OAAO,MAAM,IAAI,QAAQ,QAAQ,SAAS;AAAA,IAC3E,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,oBAAoB,OAAgB;AAChC,uBAAK,SAAQ,UAAU,OAAO,UAAU,CAAC,KAAK;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,qBAAqB,QAAgB;AACjC,uBAAK,WAAU,MAAM,QAAQ,CAAC,KAAK,QAAQ;AACvC,UAAI,QAAQ;AAAQ;AACpB,yBAAK,WAAU,IAAI,KAAK,EAAE,GAAG,KAAK,UAAU,KAAK,CAAC;AAAA,IACtD,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB;AACZ,uBAAK,WAAU,MAAM,QAAQ,CAAC,KAAK,QAAQ;AACvC,yBAAK,WAAU,IAAI,KAAK,EAAE,GAAG,KAAK,UAAU,MAAM,CAAC;AAAA,IACvD,CAAC;AAAA,EACL;AACJ;AAzOI;AAGA;AAGA;;;AOhJJ,IAAO,cAAQ,EAAE,UAAU;",
  "names": ["cf", "selection", "placeholder", "cf", "cf", "cf", "cf", "cf", "cf"]
}
